#include "peerphotoprovider.h"

#include "telegramstream.h"
#include <QStringList>
#include "messageutils.h"
#include "tlschema.h"
#include <QPainter>
#include <QFont>
#include <QFontMetrics>
#include <QPixmap>
#include <QStyle>

PeerPhotoProvider::PeerPhotoProvider(TelegramClient *client) :
    QDeclarativeImageProvider(QDeclarativeImageProvider::Image),
    _cache(),
    _client(client),
    _userIcon(":/icons/contacts.svg"),
    _chatIcon(":/icons/group.svg"),
    _channelIcon(":/icons/podcast.svg")
{
}

//https://corefork.telegram.org/api/files#stripped-thumbnails
//Code from: https://github.com/telegramdesktop/tdesktop/blob/1757dd856b84d23f83d4e562c94dde825f6eb40c/Telegram/SourceFiles/ui/image/image.cpp#L43
//Licensed as GPL3
QByteArray expandInlineBytes(const QByteArray &bytes) {
    if (bytes.size() < 3 || bytes[0] != '\x01') {
        return QByteArray();
    }
    const char header[] = "\xff\xd8\xff\xe0\x00\x10\x4a\x46\x49"
        "\x46\x00\x01\x01\x00\x00\x01\x00\x01\x00\x00\xff\xdb\x00\x43\x00\x28\x1c"
        "\x1e\x23\x1e\x19\x28\x23\x21\x23\x2d\x2b\x28\x30\x3c\x64\x41\x3c\x37\x37"
        "\x3c\x7b\x58\x5d\x49\x64\x91\x80\x99\x96\x8f\x80\x8c\x8a\xa0\xb4\xe6\xc3"
        "\xa0\xaa\xda\xad\x8a\x8c\xc8\xff\xcb\xda\xee\xf5\xff\xff\xff\x9b\xc1\xff"
        "\xff\xff\xfa\xff\xe6\xfd\xff\xf8\xff\xdb\x00\x43\x01\x2b\x2d\x2d\x3c\x35"
        "\x3c\x76\x41\x41\x76\xf8\xa5\x8c\xa5\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8"
        "\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8"
        "\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8\xf8"
        "\xf8\xf8\xf8\xf8\xf8\xff\xc0\x00\x11\x08\x00\x00\x00\x00\x03\x01\x22\x00"
        "\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x1f\x00\x00\x01\x05\x01\x01\x01\x01"
        "\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\x07\x08"
        "\x09\x0a\x0b\xff\xc4\x00\xb5\x10\x00\x02\x01\x03\x03\x02\x04\x03\x05\x05"
        "\x04\x04\x00\x00\x01\x7d\x01\x02\x03\x00\x04\x11\x05\x12\x21\x31\x41\x06"
        "\x13\x51\x61\x07\x22\x71\x14\x32\x81\x91\xa1\x08\x23\x42\xb1\xc1\x15\x52"
        "\xd1\xf0\x24\x33\x62\x72\x82\x09\x0a\x16\x17\x18\x19\x1a\x25\x26\x27\x28"
        "\x29\x2a\x34\x35\x36\x37\x38\x39\x3a\x43\x44\x45\x46\x47\x48\x49\x4a\x53"
        "\x54\x55\x56\x57\x58\x59\x5a\x63\x64\x65\x66\x67\x68\x69\x6a\x73\x74\x75"
        "\x76\x77\x78\x79\x7a\x83\x84\x85\x86\x87\x88\x89\x8a\x92\x93\x94\x95\x96"
        "\x97\x98\x99\x9a\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xb2\xb3\xb4\xb5\xb6"
        "\xb7\xb8\xb9\xba\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xd2\xd3\xd4\xd5\xd6"
        "\xd7\xd8\xd9\xda\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xf1\xf2\xf3\xf4"
        "\xf5\xf6\xf7\xf8\xf9\xfa\xff\xc4\x00\x1f\x01\x00\x03\x01\x01\x01\x01\x01"
        "\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\x07\x08"
        "\x09\x0a\x0b\xff\xc4\x00\xb5\x11\x00\x02\x01\x02\x04\x04\x03\x04\x07\x05"
        "\x04\x04\x00\x01\x02\x77\x00\x01\x02\x03\x11\x04\x05\x21\x31\x06\x12\x41"
        "\x51\x07\x61\x71\x13\x22\x32\x81\x08\x14\x42\x91\xa1\xb1\xc1\x09\x23\x33"
        "\x52\xf0\x15\x62\x72\xd1\x0a\x16\x24\x34\xe1\x25\xf1\x17\x18\x19\x1a\x26"
        "\x27\x28\x29\x2a\x35\x36\x37\x38\x39\x3a\x43\x44\x45\x46\x47\x48\x49\x4a"
        "\x53\x54\x55\x56\x57\x58\x59\x5a\x63\x64\x65\x66\x67\x68\x69\x6a\x73\x74"
        "\x75\x76\x77\x78\x79\x7a\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x92\x93\x94"
        "\x95\x96\x97\x98\x99\x9a\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xb2\xb3\xb4"
        "\xb5\xb6\xb7\xb8\xb9\xba\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xd2\xd3\xd4"
        "\xd5\xd6\xd7\xd8\xd9\xda\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xf2\xf3\xf4"
        "\xf5\xf6\xf7\xf8\xf9\xfa\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00"
        "\x3f\x00";
    const char footer[] = "\xff\xd9";
    QByteArray real(header, sizeof(header) - 1);
    real[164] = bytes[1];
    real[166] = bytes[2];
    return real
        + bytes.mid(3)
        + QByteArray::fromRawData(footer, sizeof(footer) - 1);
}

QImage PeerPhotoProvider::requestImage(const QString &id, QSize *size, const QSize &requestedSize)
{
    QImage result;

    if (_cache.contains(id)) result = _cache[id];
    else {
        if (_client.isNull()) return result;

        QStringList split = id.split(':');
        if (split.size() != 2) return result;

        qint32 type = split[0].toInt();
        qint64 pid = split[1].toLong();
        bool isUser;

        switch (type) {
        case TLType::User:
        {
            isUser = true;
            break;
        }
        case TLType::Chat:
        {
            isUser = false;
            break;
        }
        default:
            return result;
        }

        TObject peer = isUser ? _client->getUser(pid) : _client->getChat(pid);
        TObject photo = peer["photo"].toMap();

        qint64 photoId = photo["photo_id"].toLongLong();
        QByteArray strippedThumb = expandInlineBytes(photo["stripped_thumb"].toByteArray());

        if (!strippedThumb.isEmpty()) {
            //result = QImage::fromData(strippedThumb);

            //TODO: load normal image

            //_cache.insert(id, result);
        }

        if (result.isNull()) {
            if (isUser) {
                result = _userIcon;
            } else if (isChannel(peer)) {
                result = _channelIcon;
            } else {
                result = _chatIcon;
            }
        }
    }

    if (size)
        *size = result.size();

    return result;
}

QString PeerPhotoProvider::getId(TObject peer)
{
    return "image://peer/" + QString::number(commonPeerType(peer)) + ':' + getPeerId(peer).toString();
}
